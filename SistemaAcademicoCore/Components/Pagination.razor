<div class="p-xl-2">
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            @foreach (var pageItem in pageItems)
            {
                <li @onclick="@(() => SelectCurrentPage(pageItem))"
                style="cursor:pointer"
                class="page-item
                @(pageItem.Active ? "active" : null)
                @(pageItem.Enabled ? null : "disabled")">
                    <span class="page-link" href="#">@pageItem.Text</span>
                </li>
            }
        </ul>
    </nav>
</div>

@code {
    private List<PageItem> pageItems;

    [Parameter]
    public int PageIndex { get; set; }
    [Parameter]
    public int TotalPages { get; set; }
    [Parameter]
    public int Radius { get; set; }
    [Parameter]
    public EventCallback<int> OnSelectedPage { get; set; }

    protected override void OnParametersSet()
    {
        CreatePages();
    }

    private void CreatePages()
    {
        pageItems = new List<PageItem>();

        var hasPreviosPage = PageIndex > 1;
        var previousPageIndex = PageIndex - 1;
        pageItems.Add(new PageItem(previousPageIndex, hasPreviosPage, "Anterior"));

        if (Radius >= TotalPages)
            Radius = TotalPages - 1;

        for (int i = 1; i <= TotalPages; i++)
        {
            if (i >= PageIndex - Radius && i < PageIndex + Radius)
            {
                pageItems.Add(new PageItem(i, true, i.ToString())
                {
                    Active = PageIndex == i
                });
            }
        }

        var hasNextPage = PageIndex < TotalPages;
        var nextPageIndex = PageIndex + 1;
        pageItems.Add(new PageItem(nextPageIndex, hasNextPage, "Proximo"));
    }

    private async Task SelectCurrentPage(PageItem pageItem)
    {
        if (PageIndex == pageItem.PageIndex)
        {
            return;
        }

        if (!pageItem.Enabled)
        {
            return;
        }

        PageIndex = pageItem.PageIndex;
        await OnSelectedPage.InvokeAsync(pageItem.PageIndex);
    }
}
