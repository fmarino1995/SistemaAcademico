@page "/employee/add"
@inject IMediator _mediator
@inject NavigationManager _navigationMaager

@if (Funcionario == null)
{
    <br />
    <br />
    <br />
    <center>
        <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" class="align-content-center" />
    </center>
}
else
{
    <EditForm Model="@Funcionario" OnValidSubmit="CriarFuncionario">
        <div class="card">
            <div class="card-header">
                <div class="titulo-card">
                    Dados Pessoais
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col">
                        <span class="tituloinformacoes">Nome completo</span>
                        <InputText class="form-control" @bind-Value="@Funcionario.Nome" />
                    </div>
                    <div class="col">
                        <span class="tituloinformacoes">CPF</span>
                        <InputText class="form-control" @bind-Value="@Funcionario.Cpf" />
                    </div>
                </div>
            </div>
            <hr class="hr1" />
            <div class="card-header">
                <div class="titulo-card">
                    Endereço
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <ValidationSummary/>
                    <FluentValidationValidator/>
                    <div class="col-md-6">
                        <span class="tituloinformacoes">CEP</span>
                        <InputText class="form-control" @bind-Value="@Funcionario.Endereco.CEP" @onfocusout="@BuscarEndereco" />
                    </div>
                    <div class="col-md-6">
                        <span class="tituloinformacoes">Logradouro</span>
                        <InputText class="form-control" @bind-Value="@Funcionario.Endereco.Logradouro" />
                    </div>
                    <div class="col-md-6">
                        <span class="tituloinformacoes">Número</span>
                        <InputText class="form-control" @bind-Value="@Funcionario.Endereco.Numero" />
                    </div>
                    <div class="col-md-6">
                        <span class="tituloinformacoes">Complemento</span>
                        <InputText class="form-control" @bind-Value="@Funcionario.Endereco.Complemento" />
                    </div>
                    <div class="col-md-6">
                        <span class="tituloinformacoes">Bairro</span>
                        <InputText class="form-control" @bind-Value="@Funcionario.Endereco.Bairro" />
                    </div>
                    <div class="col-md-6">
                        <span class="tituloinformacoes">Cidade</span>
                        <InputText class="form-control" @bind-Value="@Funcionario.Endereco.Cidade" />
                    </div>
                    <div class="col-md-6">
                        <span class="tituloinformacoes">UF</span>
                        <InputText class="form-control" @bind-Value="@Funcionario.Endereco.EstadoUF" />
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <div class="row">
                    <div class="col-md-12">
                        <input class="btn btn-outline-dark" value="Voltar" @onclick="Cancel" />
                        <input type="submit" class="btn btn-success" value="Salvar" />
                    </div>
                </div>
                
            </div>
        </div>
    </EditForm>
}


@code {
    Funcionario Funcionario = new Funcionario
    {
        Endereco = new Endereco()
    };


    protected async void BuscarEndereco()
    {
        if (!string.IsNullOrEmpty(Funcionario.Endereco.CEP))
        {
            var addresses = await new Correios.NET.CorreiosService().GetAddressesAsync(Funcionario.Endereco.CEP);
            Funcionario.Endereco.Logradouro = addresses.FirstOrDefault().Street;
            Funcionario.Endereco.Cidade = addresses.FirstOrDefault().City;
            Funcionario.Endereco.EstadoUF = addresses.FirstOrDefault().State;
            Funcionario.Endereco.Bairro = addresses.FirstOrDefault().District;
            this.StateHasChanged();
        }
        else
        {
            Funcionario.Endereco.Logradouro = null;
            Funcionario.Endereco.Cidade = null;
            Funcionario.Endereco.EstadoUF = null;
            Funcionario.Endereco.Bairro = null;
            this.StateHasChanged();
        }
    }

    protected async Task CriarFuncionario()
    {
        var addresses = await new Correios.NET.CorreiosService().GetAddressesAsync(Funcionario.Endereco.CEP);
    }

    protected void Cancel()
    {
        _navigationMaager.NavigateTo("employee", true);
    }
}
