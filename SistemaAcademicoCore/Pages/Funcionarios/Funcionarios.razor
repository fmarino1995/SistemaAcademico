@page "/employee"
@inject IMediator _mediator
@inject NavigationManager _navigationManager
@using SistemaAcademicoApplication.Funcionarios.Queries;

@if (Exibir == false)
{
    <br />
    <br />
    <br />
    <center>
        <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" class="align-content-center" />
    </center>
}
else
{
    <div class="card">
        <div claass="card-teacher">
            <div class="titulo-card">
                Funcionários
            </div>
        </div>
        <div class="card-body">
            <DataTable Searchable="true" Exibir="@Exibir">
                <thead class="thead-light">
                    <tr>
                        <th>CPF</th>
                        <th>Nome</th>
                        <th>Status</th>
                        <th>
                            <a class="nav-link" href="/employee/add" title="Novo">
                                <span class="oi oi-plus"></span>
                            </a>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var funcionario in FuncList)
                    {
                        <tr>
                            <td>@funcionario.Cpf</td>
                            <td>@funcionario.Nome</td>
                            <td>@funcionario.Status</td>
                            <td>

                            </td>
                        </tr>
                    }
                </tbody>
            </DataTable>
        </div>
    </div>
}

@code {
    List<Funcionario> FuncList = new List<Funcionario>();
    string Message = "";
    string AlertType = "";
    bool Exibir = false;

    protected override async Task OnInitializedAsync()
    {
        var funcionarios = await _mediator.Send(new ObterFuncionariosQuery());

        if (funcionarios.Errors.Any())
        {
            Message = "Erro : " + funcionarios.Errors.First();
            AlertType = "danger";
            _navigationManager.NavigateTo($"/{Message}/{AlertType}");
        }

        FuncList = funcionarios.Result;
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            Exibir = true;
            this.StateHasChanged();
            await base.OnAfterRenderAsync(firstRender);
        }
    }
}
