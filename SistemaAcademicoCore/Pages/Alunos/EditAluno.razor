@page "/students/edit/{AlunoId}"
@using SistemaAcademicoApplication.Alunos.Commands
@using SistemaAcademicoApplication.Alunos.Queries
@using SistemaAcademicoApplication.Professores.Queries
@using SistemaAcademicoApplication.Usuarios.Queries
@inject IMediator _mediator
@inject IToastService _toastService
@inject NavigationManager _navigationManager

<PageTitle>Editar Aluno - Sistema Academico</PageTitle>

@attribute [Authorize(Policy = Policies.IsAdmin)]

@if (aluno == null)
{
    <br />
    <br />
    <br />
    <center>
        <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" class="align-content-center" />
    </center>
}
else
{
    <EditForm Model="@aluno" OnValidSubmit="EditAlunoAsync">
        <div class="card">
            <div class="card-header">
                <div class="titulo-card">
                    Editar Aluno
                </div>
            </div>
            <div class="card-body">
                <FluentValidationValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col-md-6 col-lg-6 form-space">
                        <div class="form-floating mb-3">
                            <InputText id="floatingNome" class="form-control" @bind-Value="@aluno.Nome" placeholder="Nome" />
                            <label for="floatingNome">Nome</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-6 form-space">
                        <div class="form-floating mb-3">
                            <InputText id="floatingCPF" class="form-control" @bind-Value="@aluno.Cpf" placeholder="CPF" />
                            <label for="floatingCPF">CPF</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-6 form-space">
                        <div class="form-floating mb-3">
                            <InputText readonly id="floatingMatricula" class="form-control" @bind-Value="@aluno.Matricula" placeholder="Matricula" />
                            <label for="floatingMatricula">Matrícula</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-6 form-space">
                        <div class="form-floating mb-3">
                            <InputDate id="floatingDataNasc" class="form-control" @bind-Value="@aluno.DataNascimento" placeholder="Data de nascimento" />
                            <label for="floatingDataNasc">Data de nascimento</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-6 form-space">
                        <div class="form-floating mb-3">
                            <input readonly id="floatingDataCadastro" class="form-control" value="@aluno.DataHoraCadastro.ToString("dd/MM/yyyy")" placeholder="Data de cadastro" />
                            <label for="floatingDataCadastro">Data de cadastro</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-6 form-space">
                        <div class="form-floating mb-3">
                            <InputText readonly id="floatingUsuarioCriacao" class="form-control" @bind-Value="@aluno.UsuarioCriacao" placeholder="Usuário de cadastro" />
                            <label for="floatingUsuarioCriacao">Usuário de cadastro</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-6 form-space">
                        <div class="form-floating mb-3">
                            <InputSelect class="form-select" @bind-Value="@aluno.ApplicationUserId" @onchange="VerificarEmailUsuario">
                                <option selected value="floatingEmail">|--Selecione--|</option>
                                @foreach (var user in UsersList.Where(u => u.RoleId == ConstantesSistema.RoleAluno))
                                {
                                    <option value="@user.Id">@user.Email</option>
                                }
                            </InputSelect>
                        <label for="floatingEmail">Email de usuário</label>
                        @if (!string.IsNullOrEmpty(EmailExistsErrorMessage))
                            {
                                <span class="text-danger">@EmailExistsErrorMessage</span>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <hr class="hr1" />

            <div class="card-header">
                <div class="titulo-card">
                    Endereço
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6 col-lg-6 form-space">
                        <div class="form-floating mb-3">
                            <InputText id="floatingCep" class="form-control" @bind-Value="@aluno.Endereco.CEP" placeholder="CEP" @onfocusout="BuscarEndereco" />
                            <label for="floatingCep">CEP</label>
                            @if (!string.IsNullOrEmpty(CepErrorMessage))
                            {
                                <span class="text-danger">@CepErrorMessage</span>
                            }
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-6 form-space">
                        <div class="form-floating mb-3">
                            <InputText id="floatingLogradouro" class="form-control" @bind-Value="@aluno.Endereco.Logradouro" placeholder="Logradouro" />
                            <label for="floatingLogradouro">Logradouro</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-6 form-space">
                        <div class="form-floating mb-3">
                            <InputText id="floatingNumero" class="form-control" @bind-Value="@aluno.Endereco.Numero" placeholder="Número" />
                            <label for="floatingNumero">Número</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-6 form-space">
                        <div class="form-floating mb-3">
                            <InputText id="floatingComplemento" class="form-control" @bind-Value="@aluno.Endereco.Complemento" placeholder="Complemento" />
                            <label for="floatingComplemento">Complemento</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-6 form-space">
                        <div class="form-floating mb-3">
                            <InputText id="floatingBairro" class="form-control" @bind-Value="@aluno.Endereco.Bairro" placeholder="Bairro" />
                            <label for="floatingBairro">Bairro</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-6 form-space">
                        <div class="form-floating mb-3">
                            <InputText id="floatingUF" class="form-control" @bind-Value="@aluno.Endereco.EstadoUF" placeholder="UF" />
                            <label for="floatingUF">UF</label>
                        </div>
                    </div>
                    <div class="col-md-6 col-lg-6 form-space">
                        <div class="form-floating mb-3">
                            <InputText id="floatingCidade" class="form-control" @bind-Value="@aluno.Endereco.Cidade" placeholder="Cidade" />
                            <label for="floatingCidade">Cidade</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <input type="hidden" @bind="aluno.EnderecoId" />
                <input type="hidden" @bind="aluno.AlunoId" />
                <input type="hidden" @bind="aluno.ApplicationUserId" />
                <a class="btn btn-outline-dark" href="" @onclick="Voltar">Voltar</a>
                @if (!string.IsNullOrEmpty(EmailExistsErrorMessage))
                {
                    <input type="submit" disabled class="btn btn-outline-primary" value="Salvar" />
                }
                else
                {
                    <input type="submit" class="btn btn-outline-primary" value="Salvar" />
                }
            </div>
        </div>
    </EditForm>
}


@code {
        Aluno aluno = new Aluno();
        List<ApplicationUser> UsersList = new List<ApplicationUser>();
        string Message = "";
        string CepErrorMessage = "";
        string EmailExistsErrorMessage = "";

        [Parameter]
        public string AlunoId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        aluno.Endereco = new Endereco();

        var response = await _mediator.Send(new ObterAlunoQuery { AlunoId = Convert.ToInt32(AlunoId) });

        if (response.Errors.Any())
        {
            Message = "Aluno não encontrado";
            _toastService.ShowError(Message);
            _navigationManager.NavigateTo($"students", forceLoad: true);
        }

        aluno = response.Result;

        UsersList = (await _mediator.Send(new ObterUsuariosQuery())).Result;
    }

    protected async void BuscarEndereco()
    {
        if (!string.IsNullOrEmpty(aluno.Endereco.CEP))
        {
            var addresses = await new Correios.NET.CorreiosService().GetAddressesAsync(aluno.Endereco.CEP);
            aluno.Endereco.Logradouro = addresses.Count() > 0 ? addresses.FirstOrDefault().Street : "";
            aluno.Endereco.Cidade = addresses.Count() > 0 ? addresses.FirstOrDefault().City : "";
            aluno.Endereco.EstadoUF = addresses.Count() > 0 ? addresses.FirstOrDefault().State : "";
            aluno.Endereco.Bairro = addresses.Count() > 0 ? addresses.FirstOrDefault().District : "";
            CepErrorMessage = addresses.Count() > 0 ? "" : "CEP não encontrado";
            this.StateHasChanged();
        }
        else
        {
            aluno.Endereco.Logradouro = "";
            aluno.Endereco.Cidade = "";
            aluno.Endereco.EstadoUF = "";
            aluno.Endereco.Bairro = "";
            this.StateHasChanged();
        }
    }

    protected async Task EditAlunoAsync()
    {
        var response = await _mediator.Send(new EditarAlunoCommand { Aluno = aluno });

        if (response.Errors.Any())
        {
            Message = "Ocorreu um erro ao editar o aluno.";
            _toastService.ShowError(Message);
        }
        else
        {
            Message = "Aluno editado com sucesso!";
            _toastService.ShowSuccess(Message);
        }

        _navigationManager.NavigateTo("students");
    }

    protected async void VerificarEmailUsuario(ChangeEventArgs e)
    {
        var id = e.Value.ToString();

        var alunoExists = await _mediator.Send(new VerificarProfessorEmailExistenteQuery { Id = id });

        if (alunoExists.Result)
        {
            EmailExistsErrorMessage = "Email já alocado a outro professor.";
            this.StateHasChanged();
        }
        else
        {
            EmailExistsErrorMessage = string.Empty;
            this.StateHasChanged();
        }
    }

    void Voltar()
    {
        _navigationManager.NavigateTo("students", forceLoad: true);
    }
}
