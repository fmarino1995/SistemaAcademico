@page "/students"
@inject IMediator _mediator
@inject NavigationManager _navigationManager
@layout MainLayout
@using SistemaAcademicoApplication.Alunos.Queries
@using Salazar.CSharp.String.Mask

<PageTitle>Alunos - SistemaAcademico</PageTitle>

@attribute [Authorize(Policy = Policies.IsAdmin)]

@if (AlunosList == null)
{
    <br />
    <br />
    <br />
    <center>
        <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" class="align-content-center" />
    </center>
}
else
{
    <div class="card">
        <div class="card-header">
            <div class="titulo-card">
                Alunos
            </div>
        </div>
        <div class="card-body">

            <div class="row">
                <div class="col-md-6">
                    <div class="form-space">
                        <label>Status</label>
                        <select class="form-select" @onchange="AlteraFiltro">
                            <option value="T">Todos</option>
                            @foreach (var item in ListaParametros.ListaTipoStatus)
                            {
                                <option value="@item.Key">@item.Value</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            <br />

            <DataTable Searchable="true" Exibir="@Exibir">
                <thead class="thead-light">
                    <tr>
                        <th>Nome</th>
                        <th>CPF</th>
                        <th>Matrícula</th>
                        <th>Email</th>
                        <th>Status</th>
                        <th>
                            <a href="" @onclick="GotoCreate" title="Novo aluno">
                                <span class="oi oi-plus"></span>
                            </a>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @if (AlunosList.Count == 0)
                    {
                        <tr>
                            <td validn="top" colspan="6" class="dataTables_empty text-center">Nenhum registro disponível na tabela</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var aluno in AlunosList)
                        {

                            <tr>
                                <td>@aluno.Nome</td>
                                <td>@aluno.Cpf.ToMask("###.###.###-##")</td>
                                <td>@aluno.Matricula</td>
                                <td>@aluno.Email</td>
                                <td>@ImprimirStatus(aluno.Status)</td>
                                <td style="width: 6%;">
                                    <a href="/students/edit/@aluno.AlunoId" title="Editar Aluno">
                                        <span class="oi oi-pencil" aria-hidden="true"></span>
                                    </a>
                                    <a href="/students/remove/@aluno.AlunoId" title="Inativar Aluno">
                                        <span class="oi oi-trash" aria-hidden="true"></span>
                                    </a>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </DataTable>
        </div>
    </div>
}

@code {
    bool Exibir = false;
    protected List<Aluno> AlunosListOriginal;
    protected List<Aluno> AlunosList;
    string filter;

    protected override async Task OnInitializedAsync()
    {
        var usuariosList = await _mediator.Send(new ObterAlunosQuery());
        AlunosListOriginal = usuariosList.Result;
        AlunosList = AlunosListOriginal;
    }

    protected void AlteraFiltro(ChangeEventArgs e)
    {
        filter = e.Value.ToString();
        if (filter.Equals("T"))
        {
            AlunosList = AlunosListOriginal;
        }
        else
        {
            AlunosList = AlunosListOriginal.Where(x => x.Status.Equals(filter)).ToList();
        }

        StateHasChanged();
    }

    private string ImprimirStatus(string status)
    {
        switch (status)
        {
            case Parametros.StatusAtivo:
                return DescricaoParametros.DescricaoStatusAtivo;
            case Parametros.StatusInativo:
                return DescricaoParametros.DescricaoStatusInativo;
            default:
                return status;
        }
    }


    protected void GotoCreate()
    {
        _navigationManager.NavigateTo("students/add", true);
    }
}
