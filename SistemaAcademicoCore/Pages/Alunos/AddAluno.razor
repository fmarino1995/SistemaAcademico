@page "/students/add"
@using SistemaAcademicoApplication.Alunos.Commands
@using SistemaAcademicoApplication.Enderecos.Commands
@using SistemaAcademicoApplication.Usuarios.Queries
@inject IToastService _toastService
@inject IMediator _mediator
@inject NavigationManager _navigationManager
@layout MainLayout

<PageTitle>Novo aluno - Sistema Academico</PageTitle>

<EditForm Model="@AlunoCreate" OnValidSubmit="AddAlunoAsync">
    <div class="card">
        <div class="card-header">
            <div class="titulo-card">
                Novo Aluno
            </div>
        </div>
        <div class="card-body">
            <FluentValidationValidator />
            <ValidationSummary />
            <div class="row">
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <select class="form-select" @onchange="VerificarEmailUsuario">
                            <option selected value="floatingEmail">|--Selecione--|</option>
                            @foreach (var user in UsersList.Where(u => u.RoleId == ConstantesSistema.RoleAluno))
                            {
                                <option value="@user.Id">@user.Email</option>
                            }
                        </select>
                        <label for="floatingEmail">Email de usuário</label>
                        @if(UsersList.Where(x => x.RoleId == ConstantesSistema.RoleAluno).Count() == 0)
                        {
                            <span class="text-danger">@("Nenhum usuário cadastrado como aluno")</span>
                        }
                        @if (!string.IsNullOrEmpty(EmailExistsErrorMessage))
                        {
                            <span class="text-danger">@EmailExistsErrorMessage</span>
                        }
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingCpf" class="form-control" @bind-Value="@AlunoCreate.Cpf" placeholder="CPF" />
                        <label for="floatingCpf">CPF</label>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText readonly id="floatingNome" class="form-control" @bind-Value="@AlunoCreate.Nome" placeholder="Nome" />
                        <label for="floatingNome">Nome</label>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputDate id="floatingDataNasc" class="form-control" @bind-Value="@AlunoCreate.DataNascimento" placeholder="Data de nascimento" />
                        <label for="floatingDataNasc">Data de nascimento</label>
                    </div>
                </div>
            </div>
        </div>
        <hr class="hr1" />
        <div class="card-header">
            <div class="titulo-card">
                Endereço
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingCep" class="form-control" @bind-Value="@AlunoCreate.Endereco.CEP" placeholder="CEP" @onblur="@BuscarEndereco" />
                        <label for="floatingCep">CEP</label>
                        @if (!string.IsNullOrEmpty(CepErrorMessage))
                        {
                            <span class="text-danger">@CepErrorMessage</span>
                        }
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingLogradouro" class="form-control" @bind-Value="@AlunoCreate.Endereco.Logradouro" placeholder="Logradouro" />
                        <label for="floatingLogradouro">Logradouro</label>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingNumero" class="form-control" @bind-Value="@AlunoCreate.Endereco.Numero" placeholder="Número" />
                        <label for="floatingNumero">Número</label>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingComplemento" class="form-control" @bind-Value="@AlunoCreate.Endereco.Complemento" placeholder="Complemento" />
                        <label for="floatingComplemento">Complemento</label>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingBairro" class="form-control" @bind-Value="@AlunoCreate.Endereco.Bairro" placeholder="Bairro" />
                        <label for="floatingBairro">Bairro</label>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingUF" class="form-control" @bind-Value="@AlunoCreate.Endereco.EstadoUF" placeholder="UF" />
                        <label for="floatingUF">UF</label>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingCidade" class="form-control" @bind-Value="@AlunoCreate.Endereco.Cidade" placeholder="Cidade" />
                        <label for="floatingCidade">Cidade</label>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <a class="btn btn-outline-dark" @onclick="Voltar">Voltar</a>
            @if (!string.IsNullOrEmpty(EmailExistsErrorMessage))
            {
                <input type="submit" disabled class="btn btn-outline-primary" value="Salvar" />
            }
            else
            {
                <input type="submit" class="btn btn-outline-primary" value="Salvar" />
            }
        </div>
    </div>
</EditForm>


@code {
    Aluno AlunoCreate;
    List<ApplicationUser> UsersList = new List<ApplicationUser>();
    string Message = "";
    string CepErrorMessage = "";
    string EmailExistsErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        AlunoCreate = new Aluno { Endereco = new Endereco() };

        UsersList = (await _mediator.Send(new ObterUsuariosNovosAlunoQuery())).Result;
    }

    protected async void BuscarEndereco()
    {
        if (!string.IsNullOrEmpty(AlunoCreate.Endereco.CEP))
        {
            var addresses = await new Correios.NET.CorreiosService().GetAddressesAsync(AlunoCreate.Endereco.CEP);
            AlunoCreate.Endereco.Logradouro = addresses.Count() > 0 ? addresses.FirstOrDefault().Street : "";
            AlunoCreate.Endereco.Cidade = addresses.Count() > 0 ? addresses.FirstOrDefault().City : "";
            AlunoCreate.Endereco.EstadoUF = addresses.Count() > 0 ? addresses.FirstOrDefault().State : "";
            AlunoCreate.Endereco.Bairro = addresses.Count() > 0 ? addresses.FirstOrDefault().District : "";
            CepErrorMessage = addresses.Count() > 0 ? "" : "CEP não encontrado";
            this.StateHasChanged();
        }
        else
        {
            AlunoCreate.Endereco.Logradouro = null;
            AlunoCreate.Endereco.Cidade = null;
            AlunoCreate.Endereco.EstadoUF = null;
            AlunoCreate.Endereco.Bairro = null;
            this.StateHasChanged();
        }
    }

    protected async Task AddAlunoAsync()
    {
        AlunoCreate.Matricula = Guid.NewGuid().ToString();

        var createResponse = await _mediator.Send(new CriarAlunoCommand { Aluno = AlunoCreate });

        if (createResponse.Errors.Any())
        {
            Message = "Erro ao cadastrar o aluno. Tente novamente.";
            _toastService.ShowError(Message);
        }
        else
        {
            Message = "Aluno cadastrado com sucesso!";
            _toastService.ShowSuccess(Message);
        }

        _navigationManager.NavigateTo("students");
    }

    protected async void VerificarEmailUsuario(ChangeEventArgs e)
    {
        var id = e.Value.ToString();

        var alunoExists = await _mediator.Send(new VerificarAlunoEmailExistenteCommand { Id = id });

        if (alunoExists.Result)
        {
            EmailExistsErrorMessage = "Email já alocado a outro aluno.";
            this.StateHasChanged();
        }
        else
        {
            EmailExistsErrorMessage = string.Empty;
            AlunoCreate.Nome = "Carregando...";
            this.StateHasChanged();
            var usuario = await _mediator.Send(new ObterUsuarioQuery { UserId = id });
            AlunoCreate.Nome = usuario.Result.NomeCompleto;
            AlunoCreate.ApplicationUserId = id;
            this.StateHasChanged();
        }
    }

    protected void Voltar()
    {
        _navigationManager.NavigateTo("students", true);
    }
}
