@page "/disciplines"
@using SistemaAcademicoApplication.Disciplinas.Queries
@layout MainLayout
@inject IMediator _mediator
@inject NavigationManager _navigationManager

<PageTitle>Disciplinas - SistemaAcademico</PageTitle>

@attribute [Authorize]

<AuthorizeView Policy="@Policies.IsProfessor">
    <Authorized>
        <p>sOMENTE PROFESSOR VE ISSO</p>

    </Authorized>
</AuthorizeView>

@if (DisciplinasList == null)
{
    <br />
    <br />
    <br />
    <center>
        <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" class="align-content-center" />
    </center>
}
else
{
    <div class="card">
        <div class="card-header">
            <div class="titulo-card">
                Disciplinas
            </div>
        </div>
        <div class="card-body">

            <div class="row">
                <div class="col-md-4">
                    <div class="form-space">
                        <label for="selectPeriodo">Período</label>
                        <select id="selectPeriodo" class="form-select" @onchange="AlteraPeriodo">
                            <option selected value="9991">Todos</option>
                            @foreach (var item in ListaParametros.ListaPeriodos)
                            {
                                <option value="@item.Key">@item.Value</option>
                            }
                        </select>
                    </div>
                </div>
            </div>

            <DataTable Searchable="true">
                <thead class="thead-light">
                    <tr>
                        <th>Nome</th>
                        <th>Turno</th>
                        <th>Período</th>
                        <th>Professor</th>
                        <th>
                            <a href="" @onclick="GotoCreate" title="Nova disciplina">
                                <span class="oi oi-plus"></span>
                            </a>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var disciplina in DisciplinasList)
                    {
                        @if (DisciplinasList.Count > 0)
                        {
                            <tr>
                                <td>@disciplina.Nome</td>
                                <td>@ImprimirTurno(disciplina.Turno)</td>
                                <td>@ImprimirPeriodo(disciplina.PeriodoDisciplina)</td>
                                <td>@disciplina.Professor.Nome</td>
                                <td style="width: 6%;">
                                    <a href="/disciplines/edit/@disciplina.DisciplinaId" title="Editar Disciplina">
                                        <span class="oi oi-pencil" aria-hidden="true"></span>
                                    </a>
                                    <a href="/disciplines/remove/@disciplina.DisciplinaId" title="Excluir Disciplina">
                                        <span class="oi oi-trash" aria-hidden="true"></span>
                                    </a>
                                </td>
                            </tr>
                        }
                        else
                        {
                            <tr>
                                <td validn="top" colspan="4" class="dataTables_empty">Nenhum registro disponível na tabela</td>
                            </tr>
                        }
                    }
                </tbody>
            </DataTable>
        </div>
    </div>

}

@code {
    List<Disciplina> DisciplinasList;
    List<Disciplina> DisciplinaOriginal;
    string filter;

    protected override async Task OnInitializedAsync()
    {
        DisciplinaOriginal = (await _mediator.Send(new ObterDisciplinasQuery())).Result;
        DisciplinasList = DisciplinaOriginal;
    }

    protected void GotoCreate()
    {
        _navigationManager.NavigateTo("disciplines/add", true);
    }

    protected void AlteraPeriodo(ChangeEventArgs e)
    {
        filter = e.Value.ToString();
        var periodo = Convert.ToInt32(filter);

        if (periodo == 9991) //valor default para todos
        {
            DisciplinasList = DisciplinaOriginal;
        }
        else
        {
            DisciplinasList = DisciplinaOriginal.Where(x => x.PeriodoDisciplina == periodo).ToList();
        }

        StateHasChanged();
    }

    private string ImprimirTurno(string turno)
    {
        switch (turno)
        {
            case Parametros.TipoTurnoDiurno:
                return DescricaoParametros.DescricaoTipoTurnoDiurno;
            case Parametros.TipoTurnoNoturno:
                return DescricaoParametros.DescricaoTipoTurnoNoturno;
            default:
                return turno;
        }
    }

    private string ImprimirPeriodo(int periodo)
    {
        switch (periodo)
        {
            case Parametros.PrimeiroPeriodo:
                return DescricaoParametros.DescricaoPrimeiroPeriodo;
                case Parametros.SegundoPeriodo:
                return DescricaoParametros.DescricaoSegundoPeriodo;
                case Parametros.TerceiroPeriodo:
                return DescricaoParametros.DescricaoTerceiroPeriodo;
                case Parametros.QuartoPeriodo:
                return DescricaoParametros.DescricaoQuartoPeriodo;
                case Parametros.QuintoPeriodo:
                return DescricaoParametros.DescricaoQuintoPeriodo;
            default:
                return "Não encontrado";
        }
    }
}
