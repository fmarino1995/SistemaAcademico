@page "/addrole";
@using Domain.Entities
@using SistemaAcademicoApplication.Roles.Commands;
@using Enum;

@inject IMediator _mediator
@inject NavigationManager _navigationManager
@attribute [Authorize]

<AuthorizeView Context="Auth">
    <NotAuthorized>
        <RedirectToLogin />
    </NotAuthorized>
    <Authorized>
        <Alert Message="@errorMessage" Exibir="@exibirAlert" AlertType="@alertType" />
        <div class="card">
            <div class="card-header">
                <div class="titulo-card">
                    Criar perfil
                </div>
            </div>
            <EditForm Model="@role" OnValidSubmit="@AddRoleAsync">
                <FluentValidationValidator />
                <ValidationSummary />
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="tituloinformacoes" for="roleName">Nome</label>
                                <input class="form-control" id="roleName" @bind-value="@role.Name" />
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="row">
                        <div class="col-md-12">
                            <button class="btn btn-outline-dark" @onclick="@Cancel">Voltar</button>
                            <button class="btn btn-outline-primary" type="submit">Salvar</button>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </Authorized>
</AuthorizeView>

@code {
    IdentityRole role = new IdentityRole();
    string errorMessage = string.Empty;
    public bool exibirAlert = false;
    string alertType = string.Empty;

    protected async void AddRoleAsync()
    {
        role.Id = Guid.NewGuid().ToString();
        role.ConcurrencyStamp = Guid.NewGuid().ToString();
        role.NormalizedName = role.Name.ToUpper();

        var adicionado = await _mediator.Send(new CriarRoleCommand { Role = role });

        if (adicionado.Errors.Any())
        {
            errorMessage = adicionado.Errors.First();
            alertType = AlertTypes.danger.ToString();
            exibirAlert = true;
            this.StateHasChanged();
        }
        else
        {
            _navigationManager.NavigateTo("roles");
        }
    }

    void Cancel()
    {
        _navigationManager.NavigateTo("roles", true);
    }
}