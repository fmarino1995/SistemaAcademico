@page "/"
@page "/{Message}"
@using SistemaAcademicoApplication.Avisos.Commands
@using SistemaAcademicoApplication.Avisos.Queries
@using System.Security.Claims
@using SistemaAcademicoApplication.DisciplinaAlunos.Queries
@using SistemaAcademicoApplication.Disciplinas.Queries
@using SistemaAcademicoApplication.Professores.Queries
@using SistemaAcademicoApplication.RespostaAvisos.Queries
@using SistemaAcademicoApplication.Semestres.Queries
@using SistemaAcademicoApplication.Usuarios.Queries
@layout MainLayout
@inject IMediator _mediator
@inject IToastService _toastService
@inject ICurrentUserService _currentUserService
@inject IJSRuntime _jsRuntime
@attribute [Authorize]


@*<Modal @ref="ModalRespostas" Title="Mensagens">
    <div class="modal-body">
        @if (RespostasAviso.Count > 0)
        {
            foreach (var resposta in RespostasAviso)
            {
                <hr class="hr1" />
                <p>@resposta.UsuarioCriacao @resposta.DataHoraResposta.ToString("dd/MM/yyyy HH:mm")</p>
                <div style="font-size: 15px;">@resposta.Mensagem)</div>
            }

            <div class="form-space">
                <div class="form-floating mb-3">
                    <InputTextArea rows="5" id="floatingtexto" class="form-control rounded-0" placeholder="Texto" @bind-Value="@Resposta.Mensagem" />
                    <label for="floatingtexto">Mensagem</label>
                </div>
            </div>
            <input type="submit" class="btn btn-primary" value="Salvar" @onclick="() => AddRespostaAvisoAsync(RespostasAviso.First().AvisoId, )" />
        }
        else
        {
            <div style="font-size: 15px;"><p>Nenhuma resposta encontrada.</p></div>
        }
    </div>
</Modal>*@


<Modal @ref="Modal" Title="Novo Aviso">
    <EditForm Model="@Aviso" OnValidSubmit="AddAvisoAsync">
        <FluentValidationValidator/>
        <div class="modal-body">
            <div class="form-group">
                <div class="form-floating mb-3">
                    <InputText id="floatingNome" class="form-control" placeholder="Título" @bind-Value="@Aviso.Titulo" />
                    <label for="floatingNome">Título</label>
                </div>
                <ValidationMessage class="text-danger" For="() => Aviso.Titulo"/>
            </div>
            <div class="form-group">
                <div class="form-floating mb-3">
                    <InputTextArea rows="5" id="floatingtexto" class="form-control rounded-0" placeholder="Texto" @bind-Value="@Aviso.Texto" />
                    <label for="floatingtexto">Texto</label>
                </div>
                <ValidationMessage class="text-danger" For="() => Aviso.Texto" />
            </div>
            <div class="row">
                <div class="col-md-12">
                    @if (_isProfessor)
                    {
                        <input type="checkbox" @onclick="() => Aviso.IsSelectedUsuario = !Aviso.IsSelectedUsuario" disabled="@(disableUserCheck)" @onchange="CheckAviso" /> <b> Apenas um usuário |</b>
                        <input type="checkbox" @onclick="() => Aviso.IsSelectedGrupoDisciplina = !Aviso.IsSelectedGrupoDisciplina" disabled="@(disableDisciplinaGroupCheck)" @onchange="CheckAviso" /> <b> Todos de uma disciplina</b>
                    }
                    else
                    {
                        <div class="form-floating mb-3">
                            <InputText id="floatingtexto" class="form-control rounded-0" placeholder="Email destino" @bind-Value="@Aviso.EmailDestino" />
                            <label for="floatingtexto">Email destino</label>
                        </div>
                        <ValidationMessage class="text-danger" For="() => Aviso.EmailDestino" />
                        @if (!string.IsNullOrEmpty(errorMessageEmailNaoEncontrado))
                        {
                            <p class="text-danger">@errorMessageEmailNaoEncontrado</p>
                        }
                    }
                </div>
            </div>
            <div class="col-md-12">
                @if (Aviso.IsSelectedUsuario && !Aviso.IsSelectedGrupoDisciplina)
                {
                    <div class="form-floating mb-3">
                        <InputText id="floatingtexto" class="form-control rounded-0" placeholder="Email destino" @bind-Value="@Aviso.EmailDestino" />
                        <label for="floatingtexto">Email destino</label>
                    </div>
                    <ValidationMessage class="text-danger" For="() => Aviso.EmailDestino" />
                    @if (!string.IsNullOrEmpty(errorMessageEmailNaoEncontrado))
                    {
                        <p class="text-danger">@errorMessageEmailNaoEncontrado</p>
                    }
                }
                else if (Aviso.IsSelectedGrupoDisciplina && !Aviso.IsSelectedUsuario)
                {
                    <div class="form-floating mb-3">
                        <select id="floatingTurno" class="form-select" placeholder="Turno" @onchange="AlterarTurno">
                            <option selected value="">Turno da disciplina</option>
                            @foreach (var turno in ListaParametros.ListaTipoTurno)
                            {
                                <option value="@turno.Key">@turno.Value</option>
                            }
                        </select>
                        <label for="floatingTurno">Turno</label>
                    </div>
                    @if (selectTurno)
                    {
                        <div class="form-floating mb-3">
                            <select id="floatingDisciplina" class="form-select" placeholder="Turno" @bind="disciplinaId">
                                <option disabled>Selecione a disciplina</option>
                                @foreach (var item in DisciplinasProfessorList.Where(x => x.Turno == turno))
                                {
                                    <option value="@item.DisciplinaId">@item.Nome</option>
                                }
                            </select>
                            <label for="floatingDisciplina">Disciplina</label>
                        </div>
                        @if (!string.IsNullOrEmpty(errorMessageAlunosFaltantes))
                        {
                            <p class="text-danger">@errorMessageAlunosFaltantes</p>
                        }
                    }
                }
            </div>
        </div>
        <div class="modal-footer">
            <a class="btn btn-outline-dark" @onclick="() => Modal.Close()">Voltar</a>
            <input type="submit" class="btn btn-outline-primary" value="Salvar" />
        </div>
    </EditForm>
</Modal>

<AuthorizeView Policy="@Policies.IsAdmin">

    <PageTitle>Administração - SistemaAcademico</PageTitle>

    @if (TodosAvisos == null)
    {
        <br />
        <br />
        <br />
        <center>
            <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" class="align-content-center" />
        </center>
    }
    else
    {
        <div class="card">
            <div class="card-header">
                <div class="titulo-card">
                    Quadro de avisos - Admin
                </div>
                <a href="javascript:void(0)" @onclick="() => OpenModalAviso()" title="Novo aviso"><span class="oi oi-plus"></span> Novo aviso</a>
            </div>
            <div class="card-body">
                @if (TodosAvisos.Count > 0)
                {
                    <div class="card-body">
                        <div class="list-group">
                            @foreach (var aviso in Avisos)
                            {
                                <a href="javascript:void(0)" class="list-group-item list-group-item-action" aria-current="true">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h4 class="mb-1">@aviso.Titulo</h4>
                                        <small class="text-muted">
                                            @(
                                                ContarDias(aviso.DataCriacao) == 0 ? "Hoje" : ContarDias(aviso.DataCriacao) == 1
                                                ? ContarDias(aviso.DataCriacao) + " dia atrás" : ContarDias(aviso.DataCriacao) + " dias atrás"
                                                )
                                        </small>
                                    </div>
                                    <p class="mb-1">De: @aviso.UsuarioCriacao</p>
                                    <small class="text-muted" @onclick="() => SlideToggle(aviso.AvisoId.ToString())"><u>Clique para detalhes</u></small>
                                    <div class="infos" id="@aviso.AvisoId.ToString()" style="display: none;">
                                        <hr class="hr1" />
                                        <h5>Mensagem:</h5>
                                        <div style="font-size: 15px;">@aviso.Texto</div>
                                        <br />
                                    </div>
                                </a>
                            }
                        </div>
                        <div class="text-left">
                            <Pagination TotalPages="@(totalPages != 0 ? totalPages : 1)"
                                PageIndex="@State.PageIndex"
                                Radius="5"
                                OnSelectedPage="@SelectedPage">
                            </Pagination>
                        </div>
                    </div>
                }
                else
                {
                    <p class="text-muted" style="margin-left: 24px;">Nenhuma notificação disponível</p>
                }
            </div>
        </div>
    }
</AuthorizeView>

<AuthorizeView Policy="@Policies.IsProfessor">

    <PageTitle>Professor - SistemaAcademico</PageTitle>

    @if (TodosAvisos == null)
    {
        <br />
        <br />
        <br />
        <center>
            <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" class="align-content-center" />
        </center>
    }
    else
    {
        <div class="card">
            <div class="card-header">
                <div class="titulo-card">
                    Quadro de avisos - Professor
                </div>
                <a href="javascript:void(0)" @onclick="() => OpenModalAviso(isProfessor: true)" title="Novo aviso"><span class="oi oi-plus"></span> Novo aviso</a>
            </div>
            <div class="card-body">
                <ul class="list-group list-group-flush">
                    @foreach (var aviso in TodosAvisos)
                    {
                        <li class="list-group-item">
                            <p>@aviso.Titulo - @aviso.DataCriacao.ToString("dd-MM-yyyy")</p>
                            <p>@aviso.Texto</p>
                        </li>
                    }
                </ul>
            </div>
        </div>

        @if (TodosAvisos.Count > 0)
        {
            <div class="card-body">
                <div class="list-group">
                    @foreach (var aviso in TodosAvisos)
                    {
                        <a href="javascript:void(0)" class="list-group-item list-group-item-action" aria-current="true">
                            <div class="d-flex w-100 justify-content-between">
                                <h4 class="mb-1">@aviso.Titulo</h4>
                                <small class="text-muted">
                                    @(
                                        ContarDias(aviso.DataCriacao) == 0 ? "Hoje" : ContarDias(aviso.DataCriacao) == 1
                                        ? ContarDias(aviso.DataCriacao) + " dia atrás" : ContarDias(aviso.DataCriacao) + " dias atrás"
                                        )
                                </small>
                            </div>
                            <p class="mb-1">De: @aviso.UsuarioCriacao</p>
                            <small class="text-muted" @onclick="() => SlideToggle(aviso.AvisoId.ToString())"><u>Clique para detalhes</u></small>
                            <div class="infos" id="@("aviso"+aviso.AvisoId.ToString())" style="display: none;">
                                <hr class="hr1" />
                                <div style="font-size: 15px;">@aviso.Texto</div>
                                <br />
                            </div>
                        </a>
                    }
                </div>
                @*<div class="text-left">
        <Pagination TotalPages="@(totalPages != 0 ? totalPages : 1)"
        PageIndex="@State.PageIndex"
        Radius="3"
        OnSelectedPage="@SelectedPage">
        </Pagination>
        </div>*@
            </div>
        }
        else
        {
            <p class="text-muted" style="margin-left: 24px;">Nenhuma notificação disponível</p>
        }
    }
</AuthorizeView>

<AuthorizeView Policy="@Policies.IsAluno">

    <PageTitle>Aluno - SistemaAcademico</PageTitle>

    @if (TodosAvisos == null)
    {
        <br />
        <br />
        <br />
        <center>
            <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" class="align-content-center" />
        </center>
    }
    else
    {
        <div class="card">
            <div class="card-header">
                <div class="titulo-card">
                    Quadro de avisos - Admin
                </div>
                <a href="javascript:void(0)" @onclick="() => OpenModalAviso()" title="Novo aviso"><span class="oi oi-plus"></span> Novo aviso</a>
            </div>
            <div class="card-body">
                @if (TodosAvisos.Count > 0)
                {
                    <div class="card-body">
                        <div class="list-group">
                            @foreach (var aviso in Avisos)
                            {
                                <a href="javascript:void(0)" class="list-group-item list-group-item-action" aria-current="true">
                                    <div class="d-flex w-100 justify-content-between">
                                        <h4 class="mb-1">@aviso.Titulo</h4>
                                        <small class="text-muted">
                                            @(
                                                ContarDias(aviso.DataCriacao) == 0 ? "Hoje" : ContarDias(aviso.DataCriacao) == 1
                                                ? ContarDias(aviso.DataCriacao) + " dia atrás" : ContarDias(aviso.DataCriacao) + " dias atrás"
                                                )
                                        </small>
                                    </div>
                                    <p class="mb-1">De: @aviso.UsuarioCriacao</p>
                                    <small class="text-muted" @onclick="() => SlideToggle(aviso.AvisoId.ToString())"><u>Clique para detalhes</u></small>
                                    <div class="infos" id="@aviso.AvisoId.ToString()" style="display: none;">
                                        <hr class="hr1" />
                                        <h5>Mensagem:</h5>
                                        <div style="font-size: 15px;">@aviso.Texto</div>
                                        <br />
                                    </div>
                                </a>
                            }
                        </div>
                        <div class="text-left">
                            <Pagination TotalPages="@(totalPages != 0 ? totalPages : 1)"
                                PageIndex="@State.PageIndex"
                                Radius="5"
                                OnSelectedPage="@SelectedPage">
                            </Pagination>
                        </div>
                    </div>
                }
                else
                {
                    <p class="text-muted" style="margin-left: 24px;">Nenhuma notificação disponível</p>
                }
            </div>
        </div>
    }
</AuthorizeView>



@code {
    [Parameter]
    public string Message { get; set; }
    [CascadingParameter]
    PageIndexStateProvider State { get; set; }

    private Modal Modal { get; set; }
    private Modal ModalRespostas { get; set; }

    private List<Aviso> TodosAvisos;
    private RespostaAviso Resposta = new RespostaAviso();
    private List<Aviso> Avisos;
    Professor ProfessorLogado;
    private List<RespostaAviso> RespostasAviso;
    private Domain.Entities.SemestreVigente SemestreVigente;
    private List<Disciplina> DisciplinasProfessorList = new List<Disciplina>();
    private List<DisciplinaAluno> AlunosDisciplina = new List<DisciplinaAluno>();
    bool IsUserAuthenticated;
    ClaimsPrincipal user;
    Aviso Aviso;
    bool disableUserCheck;
    bool disableGroupCheck;
    bool disableDisciplinaGroupCheck;
    bool selectUser;
    bool selectGroup;
    bool selectDisciplineGroup;
    string turno;
    int disciplinaId;
    bool selectTurno;
    string errorMessageAlunosFaltantes;
    bool _isProfessor;
    string errorMessageEmailNaoEncontrado;

    private int itemsPerPage = 5;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        Aviso = new Aviso();
        var usuarioLogado = await _currentUserService.GetUserNameAsync();
        var ultimosAvisos = await _mediator.Send(new ObterUltimosAvisosQuery { EmailUsuario = usuarioLogado });
        SemestreVigente = (await _mediator.Send(new ObterSemestreVigenteQuery())).Result;

        if (ultimosAvisos.Errors.Any())
        {
            _toastService.ShowInfo("Erro ao carregar os últimos avisos");
        }

        TodosAvisos = ultimosAvisos.Result;

        if (TodosAvisos != null)
        {
            totalPages = TodosAvisos.Count() % itemsPerPage == 0 ? (int)(TodosAvisos.Count() / itemsPerPage)
            : (int)(TodosAvisos.Count() / itemsPerPage) + 1;

            var skipCount = itemsPerPage * (State.PageIndex - 1);
            Avisos = TodosAvisos.Skip(skipCount).Take(itemsPerPage).ToList();
        }
    }

    private void SelectedPage(int selectedPageIndex)
    {
        if (TodosAvisos != null)
        {
            State.PageIndex = selectedPageIndex;
            var skipCount = itemsPerPage * (State.PageIndex - 1);
            Avisos = TodosAvisos.Skip(skipCount).Take(itemsPerPage).ToList();
            StateHasChanged();
        }
    }

    private void CheckAviso()
    {
        if (Aviso.IsSelectedUsuario && !Aviso.IsSelectedGrupoDisciplina)
        {
            disableGroupCheck = true;
            disableDisciplinaGroupCheck = true;
            selectUser = true;
            selectDisciplineGroup = false;
            selectGroup = false;


        }
        else if (Aviso.IsSelectedGrupoDisciplina && !Aviso.IsSelectedUsuario)
        {
            Aviso.EmailDestino = "checado";
            disableUserCheck = true;
            disableGroupCheck = true;
            selectDisciplineGroup = true;
            selectGroup = false;
            selectUser = false;
        }
        else
        {
            disableDisciplinaGroupCheck = false;
            disableUserCheck = false;
            disableGroupCheck = false;
            selectUser = false;
            selectDisciplineGroup = false;
            selectGroup = false;
        }

        StateHasChanged();
    }

    private async Task OpenModalAviso(bool isProfessor = false)
    {
        Aviso = new Aviso();
        if (isProfessor)
        {
            _isProfessor = true;
            var usuarioLogado = await _currentUserService.GetUserNameAsync();
            var professorLogado = await _mediator.Send(new ObterProfessorEmailQuery { Email = usuarioLogado });
            ProfessorLogado = professorLogado.Result;
            DisciplinasProfessorList = (await _mediator.Send(new ObterDisciplinasProfessorIdQuery { ProfessorId = professorLogado.Result.ProfessorId })).Result;
        }
        Modal.Open();
    }

    protected void AlterarTurno(ChangeEventArgs ev)
    {
        turno = ev.Value.ToString();
        selectTurno = !string.IsNullOrEmpty(turno);
        StateHasChanged();
    }

    protected void Altera(ChangeEventArgs ev)
    {
        turno = ev.Value.ToString();
        selectTurno = string.IsNullOrEmpty(turno);
        StateHasChanged();
    }

    private async Task AddAvisoAsync()
    {
        if (Aviso.IsSelectedUsuario && !Aviso.IsSelectedGrupoDisciplina)
        {
            Aviso.DataCriacao = DateTime.Now;
            Aviso.UsuarioCriacao = await _currentUserService.GetUserNameAsync();

            var emailUsuarioResponse = await _mediator.Send(new ConsultarEmailUsuarioQuery { Email = Aviso.EmailDestino });

            if (emailUsuarioResponse.Errors.Any())
            {
                _toastService.ShowError("Usuário não encontrado com o e-mail informado. Tente novamente.");
                errorMessageEmailNaoEncontrado = "Usuário não encontrado com o e-mail informado.";
            }
            else
            {
                Aviso.ApplicationUserId = emailUsuarioResponse.Result.Id;
                await _mediator.Send(new CriarAvisoCommand { Aviso = Aviso });
                _toastService.ShowSuccess("Aviso criado com sucesso!");
                Modal.Close();
                StateHasChanged();
            }
        }
        else if (Aviso.IsSelectedGrupoDisciplina && !Aviso.IsSelectedUsuario)
        {
            var alunosDisciplinaResponse = await _mediator.Send(new ObterAlunosDisciplinaProfessorQuery
            {
                DisciplinaId = disciplinaId,
                ProfessorId = ProfessorLogado.ProfessorId,
                SemestreVigenteId = SemestreVigente.SemestreVigenteId,
                Turno = turno
            });

            if (alunosDisciplinaResponse.Result.Count == 0)
            {
                errorMessageAlunosFaltantes = "Nenhum aluno cadastrado na disciplina selecionada.";
                StateHasChanged();
            }
            else
            {
                if (alunosDisciplinaResponse.Errors.Any())
                {
                    _toastService.ShowError("Ocorreu um erro ao enviar os avisos para a disciplina.");
                }
                else
                {
                    foreach (var aluno in alunosDisciplinaResponse.Result)
                    {
                        var aviso = new Aviso
                        {
                            Titulo = Aviso.Titulo,
                            Texto = Aviso.Texto,
                            DataCriacao = DateTime.Now,
                            UsuarioCriacao = await _currentUserService.GetUserNameAsync(),
                            ApplicationUserId = (await _mediator.Send(new ConsultarEmailUsuarioQuery { Email = aluno.Aluno.Email })).Result.Id,
                        };

                        await _mediator.Send(new CriarAvisoCommand { Aviso = aviso });
                    }

                    _toastService.ShowSuccess("Avisos enviados com sucesso!");
                    Modal.Close();
                    StateHasChanged();
                }
            }
        }
    }

    protected async Task SlideToggle(string selector)
    {
        await _jsRuntime.InvokeVoidAsync("slideToggle", $"#{selector}");
    }

    protected int ContarDias(DateTime dataAviso) => (DateTime.Now - dataAviso).Days;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if (Message != null)
            {
                _toastService.ShowError(Message);
                StateHasChanged();
            }
        }
    }
}