@page "/professors/add"
@using SistemaAcademicoApplication.Professores.Commands
@using SistemaAcademicoApplication.Professores.Queries
@using SistemaAcademicoApplication.Usuarios.Queries
@inject IMediator _mediator
@inject IToastService _toastService
@inject NavigationManager _navigationManager
@layout MainLayout

<PageTitle>Novo professor - Sistema Academico</PageTitle>

@attribute [Authorize(Policy = Policies.IsAdmin)]

<EditForm Model="@ProfessorCreate" OnValidSubmit="AddProfessorAsync">
    <div class="card">
        <div class="card-header">
            <div class="titulo-card">
                Novo Professor
            </div>
        </div>
        <div class="card-body">
            <FluentValidationValidator />
            <ValidationSummary />
            <div class="row">
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingCpf" class="form-control" @bind-Value="@ProfessorCreate.Cpf" placeholder="CPF" />
                        <label for="floatingCpf">CPF</label>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingNome" class="form-control" @bind-Value="@ProfessorCreate.Nome" placeholder="Nome" />
                        <label for="floatingNome">Nome</label>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingMatricula" class="form-control" @bind-Value="@ProfessorCreate.Matricula" placeholder="Matrícula" />
                        <label for="floatingMatricula">Matrícula</label>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputDate id="floatingDataNasc" class="form-control" @bind-Value="@ProfessorCreate.DataNascimento" placeholder="Data de nascimento" />
                        <label for="floatingDataNasc">Data de nascimento</label>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputSelect class="form-select" @bind-Value="@ProfessorCreate.ApplicationUserId" @onchange="VerificarEmailUsuario">
                            <option selected value="floatingEmail">|--Selecione--|</option>
                            @foreach (var user in UsersList) // filtrar por role professor
                            {
                                <option value="@user.Id">@user.Email</option>
                            }
                        </InputSelect>
                        <label for="floatingEmail">Email de usuário</label>
                        @if (!string.IsNullOrEmpty(EmailExistsErrorMessage))
                        {
                            <span class="text-danger">@EmailExistsErrorMessage</span>
                        }
                    </div>
                </div>
            </div>
        </div>
        <hr class="hr1" />
        <div class="card-header">
            <div class="titulo-card">
                Endereço
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingCep" class="form-control" @bind-Value="@ProfessorCreate.Endereco.CEP" placeholder="CEP" @onfocusout="@BuscarEndereco" />
                        <label for="floatingCep">CEP</label>
                        @if (!string.IsNullOrEmpty(CepErrorMessage))
                        {
                            <span class="text-danger">@CepErrorMessage</span>
                        }
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingLogradouro" class="form-control" @bind-Value="@ProfessorCreate.Endereco.Logradouro" placeholder="Logradouro" />
                        <label for="floatingLogradouro">Logradouro</label>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingNumero" class="form-control" @bind-Value="@ProfessorCreate.Endereco.Numero" placeholder="Número" />
                        <label for="floatingNumero">Número</label>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingComplemento" class="form-control" @bind-Value="@ProfessorCreate.Endereco.Complemento" placeholder="Complemento" />
                        <label for="floatingComplemento">Complemento</label>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingBairro" class="form-control" @bind-Value="@ProfessorCreate.Endereco.Bairro" placeholder="Bairro" />
                        <label for="floatingBairro">Bairro</label>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingUF" class="form-control" @bind-Value="@ProfessorCreate.Endereco.EstadoUF" placeholder="UF" />
                        <label for="floatingUF">UF</label>
                    </div>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <InputText id="floatingCidade" class="form-control" @bind-Value="@ProfessorCreate.Endereco.Cidade" placeholder="Cidade" />
                        <label for="floatingCidade">Cidade</label>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <a class="btn btn-outline-dark" @onclick="Voltar">Voltar</a>
            @if (!string.IsNullOrEmpty(EmailExistsErrorMessage))
            {
                <input type="submit" disabled class="btn btn-outline-primary" value="Salvar" />
            }
            else
            {
                <input type="submit" class="btn btn-outline-primary" value="Salvar" />
            }
        </div>
    </div>
</EditForm>

@code {
    Professor ProfessorCreate;
    List<ApplicationUser> UsersList = new List<ApplicationUser>();
    string Message = "";
    string CepErrorMessage = "";
    string EmailExistsErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        ProfessorCreate = new Professor { Endereco = new Endereco() };

        UsersList = (await _mediator.Send(new ObterUsuariosQuery())).Result;
    }

    protected async void BuscarEndereco()
    {
        if (!string.IsNullOrEmpty(ProfessorCreate.Endereco.CEP))
        {
            var addresses = await new Correios.NET.CorreiosService().GetAddressesAsync(ProfessorCreate.Endereco.CEP);
            ProfessorCreate.Endereco.Logradouro = addresses.Count() > 0 ? addresses.FirstOrDefault().Street : "";
            ProfessorCreate.Endereco.Cidade = addresses.Count() > 0 ? addresses.FirstOrDefault().City : "";
            ProfessorCreate.Endereco.EstadoUF = addresses.Count() > 0 ? addresses.FirstOrDefault().State : "";
            ProfessorCreate.Endereco.Bairro = addresses.Count() > 0 ? addresses.FirstOrDefault().District : "";
            CepErrorMessage = addresses.Count() > 0 ? "" : "CEP não encontrado";
            this.StateHasChanged();
        }
        else
        {
            ProfessorCreate.Endereco.Logradouro = null;
            ProfessorCreate.Endereco.Cidade = null;
            ProfessorCreate.Endereco.EstadoUF = null;
            ProfessorCreate.Endereco.Bairro = null;
            this.StateHasChanged();
        }
    }

    protected async Task AddProfessorAsync()
    {
        var createResponse = await _mediator.Send(new CriarProfessorCommand { Professor = ProfessorCreate });

        if (createResponse.Errors.Any())
        {
            Message = "Erro ao cadastrar o professor. Tente novamente.";
            _toastService.ShowError(Message);
        }
        else
        {
            Message = "Professor cadastrado com sucesso!";
            _toastService.ShowSuccess(Message);
        }

        _navigationManager.NavigateTo("professor");
    }

    protected async void VerificarEmailUsuario(ChangeEventArgs e)
    {
        var id = e.Value.ToString();

        var alunoExists = await _mediator.Send(new VerificarProfessorEmailExistenteQuery { Id = id });

        if (alunoExists.Result)
        {
            EmailExistsErrorMessage = "Email já alocado a outro professor.";
            this.StateHasChanged();
        }
        else
        {
            EmailExistsErrorMessage = string.Empty;
            this.StateHasChanged();
        }
    }

    protected void Voltar()
    {
        _navigationManager.NavigateTo("professors", true);
    }
}
