@page "/professors/delete/{ProfessorId}"
@using Domain.Constantes
@using SistemaAcademicoApplication.Professores.Commands
@using SistemaAcademicoApplication.Professores.Queries
@inject IMediator _mediator
@inject NavigationManager _navigationManager

@if (aluno == null)
{
    <br />
    <br />
    <br />
    <center>
        <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" class="align-content-center" />
    </center>
}
else
{
    <EditForm Model="@professor" OnValidSubmit="DeleteProfessorAsync">
        <div class="card">
            <div class="card-header">
                <div class="titulo-card">
                    Inativar Professor
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6 form-space">
                        <span class="tituloinformacoes">Nome</span>
                        <div class="content-informa">
                            @professor.Nome
                        </div>
                    </div>
                    <div class="col-md-6 form-space">
                        <span class="tituloinformacoes">CPF (apenas números)</span>
                        <div class="content-informa">
                            @professor.Cpf.ToMask("###.###.###-##")
                        </div>
                    </div>
                    <div class="col-md-6 form-space">
                        <span class="tituloinformacoes">Matrícula</span>
                        <div class="content-informa">
                            @professor.Matricula
                        </div>
                    </div>
                    <div class="col-md-6 form-space">
                        <span class="tituloinformacoes">Data de Nascimento</span>
                        <div class="content-informa">
                            @professor.DataNascimento.ToString("dd/MM/yyyy")
                        </div>
                    </div>
                    <div class="col-md-6 form-space">
                        <span class="tituloinformacoes">Data de Cadastro</span>
                        <div class="content-informa">
                            @professor.DataHoraCadastro.ToString("dd/MM/yyyy")
                        </div>
                    </div>
                    <div class="col-md-6 form-space">
                        <span class="tituloinformacoes">Usuário de cadastro</span>
                        <div class="content-informa">
                            @professor.UsuarioCriacao
                        </div>
                    </div>
                    <div class="col-md-6 form-space">
                        <span class="tituloinformacoes">Email</span>
                        <div class="content-informa">
                            @professor.Email
                        </div>
                    </div>
                </div>
            </div>

            <hr class="hr1" />

            <div class="card-header">
                <div class="titulo-card">
                    Endereço
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6 form-space">
                        <span class="tituloinformacoes">CEP</span>
                        <div class="content-informa">
                            @professor.Endereco.CEP
                        </div>
                    </div>
                    <div class="col-md-6 form-space">
                        <span class="tituloinformacoes">Logradouro</span>
                        <div class="content-informa">
                            @professor.Endereco.Logradouro
                        </div>
                    </div>
                    <div class="col-md-6 form-space">
                        <span class="tituloinformacoes">Numero</span>
                        <div class="content-informa">
                            @professor.Endereco.Numero
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(professor.Endereco.Complemento))
                    {
                        <div class="col-md-6 form-space">
                            <span class="tituloinformacoes">Complemento</span>
                            <div class="content-informa">
                                @professor.Endereco.Complemento
                            </div>
                        </div>
                    }
                    <div class="col-md-6 form-space">
                        <span class="tituloinformacoes">Bairro</span>
                        <div class="content-informa">
                            @professor.Endereco.Bairro
                        </div>
                    </div>
                    <div class="col-md-6 form-space">
                        <span class="tituloinformacoes">UF</span>
                        <div class="content-informa">
                            @professor.Endereco.EstadoUF
                        </div>
                    </div>
                    <div class="col-md-6 form-space">
                        <span class="tituloinformacoes">Cidade</span>
                        <div class="content-informa">
                            @professor.Endereco.Cidade
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <input type="hidden" @bind="professor.ProfessorId" />
                <a class="btn btn-outline-dark" href="" @onclick="Voltar">Voltar</a>
                <input type="submit" class="btn btn-outline-danger" value="Inativar" />
            </div>
        </div>
    </EditForm>
}


@code {
    [Parameter]
    public string ProfessorId { get; set; }

    Professor professor;
    string Message = "";
    string AlertType = "";

    protected override async Task OnInitializedAsync()
    {
        var response = await _mediator.Send(new ObterProfessorQuery { ProfessorId = Convert.ToInt32(ProfessorId) });

        if (response.Errors.Any())
        {
            Message = "Aluno não encontrado";
            AlertType = "danger";
            _navigationManager.NavigateTo($"professors/{Message}/{AlertType}", forceLoad: true);
        }

        professor = response.Result;
    }

    private async Task DeleteProfessorAsync()
    {
        var response = await _mediator.Send(new ExcluirProfessorCommand { Professor = professor });

        if (response.Errors.Any())
        {
            Message = "Erro ao inativar o professor : " + response.Errors.First();
            AlertType = ConstantesSistema.TipoAlertaErro;
            _navigationManager.NavigateTo($"students/{Message}/{AlertType}", forceLoad: true);
        }

        Message = "Professor inativado com sucesso!";
        AlertType = ConstantesSistema.TipoAlertaSucesso;
        _navigationManager.NavigateTo($"professors/{Message}/{AlertType}");
    }

    void Voltar()
    {
        _navigationManager.NavigateTo("professors");
    }
}
