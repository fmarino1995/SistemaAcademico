@page "/users"
@inject IMediator _mediator
@inject IToastService _toastService
@layout MainLayout
@using Domain.Constantes
@using SistemaAcademicoApplication.Usuarios.Queries

<PageTitle>Usuários - SistemaAcademico</PageTitle>

@attribute [Authorize(Policy = Policies.IsAdmin)]

@if (Exibir == false)
{
    <br />
    <br />
    <br />
    <center>
        <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" class="align-content-center" />
    </center>
}
else
{
    @*<Alerta Exibir="@ExibirAlert" Message="@Message" AlertType="@AlertType" />*@
    <div class="card">
        <div class="card-header">
            <div class="titulo-card">
                Usuários
            </div>
        </div>
        <div class="card-body">
            <DataTable Searchable="true" Exibir="@Exibir">
                <thead class="thead-light">
                    <tr>
                        <th>Nome</th>
                        <th>Email</th>
                        <th>Status</th>
                        <th>Data de cadastro</th>
                        <th>
                            <a href="/Identity/Account/Register" title="Novo usuário">
                                <span class="oi oi-plus"></span>
                            </a>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in Usuarios)
                    {
                        <tr>
                            <td>@user.NomeCompleto</td>
                            <td>@user.Email</td>
                            <td>@user.Status</td>
                            <td>@user.DataCriacao.ToString("dd/MM/yyyy")</td>
                            <td style="width: 6%;">
                                <a href="/users/edit/@user.Id" title="Editar Usuário">
                                    <span class="oi oi-pencil" aria-hidden="true"></span>
                                </a>
                                <a href="/users/remove/@user.Id" title="Inativar usuário">
                                    <span class="oi oi-trash" aria-hidden="true"></span>
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </DataTable>
        </div>
    </div>
}

@code {

    [Parameter]
    public string Message { get; set; }
    [Parameter]
    public string AlertType { get; set; }

    protected bool Exibir = false;
    public bool ExibirAlert = false;
    protected List<ApplicationUser> Usuarios = new List<ApplicationUser>();

    protected override async Task OnInitializedAsync()
    {
        var usuariosList = await _mediator.Send(new ObterUsuariosQuery());
        Usuarios = usuariosList.Result;

        foreach (var item in Usuarios)
        {
            item.StatusFull = ImprimirStatusUsuario(item.Status);
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            Exibir = true;
            await base.OnAfterRenderAsync(firstRender);
            this.StateHasChanged();
        }
    }

    private string ImprimirStatusUsuario(string status)
    {
        switch (status)
        {
            case Parametros.StatusAtivo:
                return DescricaoParametros.DescriçãoStatusAtivo;
            case Parametros.StatusInativo:
                return DescricaoParametros.DescriçãoStatusInativo;
            default:
                return status;
        }
    }
}
