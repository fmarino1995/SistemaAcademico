@page "/users/remove/{userId}"
@using Domain.Constantes
@using SistemaAcademicoApplication.Usuarios.Commands
@using SistemaAcademicoApplication.Usuarios.Queries
@inject IMediator _mediator
@inject IToastService _toastService
@inject NavigationManager _navigationManager

<PageTitle>Remover Usuário - SistemaAcademico</PageTitle>

@attribute [Authorize(Policy = Policies.IsAdmin)]

@if (User == null)
{
    <br />
    <br />
    <br />
    <center>
        <img src="https://media.giphy.com/media/3oEjI6SIIHBdRxXI40/giphy.gif" class="align-content-center" />
    </center>
}
else
{
    <form @onsubmit="OnSubmit">
        <div class="card">
            <div class="card-header">
                <div class="titulo-card">
                    Excluir Usuário
                </div>
            </div>
            <div class="card-body row">
                <div class="col-md-6">
                    <label class="tituloinformacoes">Nome</label>
                    <div class="content-informa">@User.NomeCompleto</div>
                </div>
                <div class="col-md-6">
                    <span class="tituloinformacoes">Email</span>
                    <div class="content-informa">@User.Email</div>
                </div>
                <div class="col-md-6">
                    <label class="tituloinformacoes">Data de criação</label>
                    <div class="content-informa">@User.DataCriacao</div>
                </div>
            </div>
            <div class="card-footer">
                <div class="row">
                    <div class="col-md-12">
                        <a class="btn btn-outline-dark" href="/users">Voltar</a>
                        <button type="submit" class="btn btn-outline-primary">Excluir</button>
                    </div>
                </div>
            </div>
        </div>
    </form>
}

@code {
    [Parameter]
    public string UserId { get; set; }
    string Message = "";

    protected ApplicationUser User;

    protected override async Task OnInitializedAsync()
    {
        var user = await _mediator.Send(new ObterUsuarioQuery { UserId = UserId });

        User = user.Result;
    }

    protected async void OnSubmit()
    {
        var response = await _mediator.Send(new RemoverUsuarioCommand { UserId = UserId });

        if (!response.Result)
        {
            Message = "Ocorreu um erro ao excluir o usuário. Tente novamente";
            _toastService.ShowError(Message);
            this.StateHasChanged();
        }
        else
        {
            Message = "Usuário excluido com sucesso!";
            _toastService.ShowSuccess(Message);
            _navigationManager.NavigateTo("users");
        }
    }
}
