@page "/users/edit/{UserId}"
@using SistemaAcademicoApplication.Roles.Queries
@using SistemaAcademicoApplication.Usuarios.Commands
@using SistemaAcademicoApplication.Usuarios.Queries
@using Domain.Constantes;
@inject IMediator _mediator
@inject NavigationManager _navigationManager

<PageTitle>Editar Usuário - SistemaAcademico</PageTitle>

<EditForm Model="@User" OnValidSubmit="UpdateUser">
    <div class="card">
        <div class="card-header">
            <div class="titulo-card">
                Editar Usuário
            </div>
        </div>
        <div class="card-body">
            <Alert AlertType="@AlertType" Message="@AlertMessage" Exibir="@ExibirAlert" />
            <FluentValidationValidator />
            <ValidationSummary />
            <div class="row">
                <div class="col-md-6 col-lg-6 form-space">
                    <span class="tituloinformacoes">Email</span>
                    <InputText readonly class="form-control" @bind-Value="@User.Email"></InputText>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <span class="tituloinformacoes">Nome completo</span>
                    <InputText class="form-control" @bind-Value="@User.NomeCompleto"></InputText>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <span class="tituloinformacoes">Status</span>
                    <select class="form-select" @bind="User.Status">
                        @foreach (var item in ListaParametros.ListaTipoStatus)
                        {
                            <option value="@item.Key">@item.Value</option>
                        }
                    </select>
                </div>
                <div class="col-md-6 col-lg-6 form-space">
                    <span class="tituloinformacoes">Perfil</span>
                    <InputText readonly class="form-control" @bind-Value="User.RoleName"></InputText>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <div class="row">
                <div class="col-md-12">
                    <a class="btn btn-dark" href="users">Voltar</a>
                    <button type="submit" class="btn btn-primary">Salvar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    ApplicationUser User = new ApplicationUser();
    List<IdentityRole> Roles = new List<IdentityRole>();
    string SelectedName;
    string AlertMessage = "";
    string AlertType = "";
    bool ExibirAlert = false;

    List<string> tipos;

    [Parameter]
    public string UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        tipos = new List<string>() { "A", "I" };

        var user = (await _mediator.Send(new ObterUsuarioQuery { UserId = UserId }));

        User = user.Result;

        Roles = (await _mediator.Send(new ObterRolesQuery())).Result;

        User.RoleName = Roles.FirstOrDefault(r => r.Id.ToLower() == User.RoleId.ToLower()).Name;
    }

    private async void UpdateUser()
    {
        var editado = await _mediator.Send(new EditarUsuarioCommand { User = User });

        if (editado.Errors.Any())
        {
            AlertMessage = "Erro ao editar o usuário. Tente novamente";
            AlertType = "dannger";
            ExibirAlert = true;
            this.StateHasChanged();
        }
        else
        {
            AlertMessage = "Usuário editado com sucesso!";
            AlertType = "success";

            _navigationManager.NavigateTo($"users/{AlertMessage}/{AlertType}");
        }
    }
}
