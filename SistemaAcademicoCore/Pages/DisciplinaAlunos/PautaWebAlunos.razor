@page "/webagenda/students"
@using SistemaAcademicoApplication.Alunos.Queries
@using SistemaAcademicoApplication.DisciplinaAlunos.Queries
@inject IMediator _mediator
@inject ICurrentUserService _currentUserService
@inject IToastService _toastService
@inject NavigationManager _navigationManager

@attribute [Authorize(Policy = Policies.IsAluno)]

<PageTitle>Pauta Web - Aluno</PageTitle>

@if (DisciplinasAlunoList == null)
{
    <br />
    <br />
    <br />
    <center>
        <img src="https://media.giphy.com/media/jAYUbVXgESSti/giphy.gif" class="align-content-center" />
    </center>
}
else
{
    <div class="card">
        <div class="card-header">
            <div class="titulo-card">
                Pauta Web - Aluno
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <select id="selectSemestre" class="form-select">
                            <option selected value="">Selecione o semestre</option>
                            <!--Colocar listagem com semestre vigente-->
                        </select>
                        <label for="selectSemestre">Semestre</label>
                    </div>
                </div>
            </div>
            <DataTable Searchable="true">
                <thead class="thead-light">
                    <tr>
                        <th>Disciplina</th>
                        <th>Total aulas válidas</th>
                        <th>Qtd. Falta</th>
                        <th>Qtd. presença</th>
                        <th>Avaliação 1</th>
                        <th>Avaliação 2</th>
                        <th>Prova final</th>
                        <th>Nota final</th>
                    </tr>
                </thead>
                <tbody>

                </tbody>
            </DataTable>
        </div>
    </div>
}



@code {
    Aluno AlunoLogado;
    List<DisciplinaAluno> DisciplinasAlunoList;

    protected override async Task OnInitializedAsync()
    {
        var usuarioLogado = await _currentUserService.GetUserNameAsync();
        var alunoLogado = await _mediator.Send(new ObterAlunoEmailQuery { Email = usuarioLogado });
        AlunoLogado = alunoLogado.Result;

        DisciplinasAlunoList = await GetDisciplinasAlunoAsync(AlunoLogado.AlunoId);
    }

    private async Task AlteraSemestre(ChangeEventArgs ev)
    {

    }

    private async Task<List<DisciplinaAluno>> GetDisciplinasAlunoAsync(int alunoId)
    {
        return await Task.FromResult((await _mediator.Send(new ObterPautaWebAlunoQuery { AlunoId = alunoId })).Result);
    }
}
