@page "/webagenda/professors"
@using Domain.ViewModels
@using SistemaAcademicoApplication.DisciplinaAlunos.Commands
@using SistemaAcademicoApplication.DisciplinaAlunos.Queries
@using SistemaAcademicoApplication.Disciplinas.Queries
@using SistemaAcademicoApplication.Professores.Queries
@inject IMediator _mediator
@inject ICurrentUserService _currentUserService
@inject IToastService _toastService
@inject NavigationManager _navigationManager

@attribute [Authorize(Policy = Policies.IsProfessor)]

<PageTitle>Pauta Web - Professor</PageTitle>

<Modal Title="Presença">
    <div class="modal-body">
        <table class="table table-striped table-bordered">
            <thead class="thead-light">
                <tr>
                    <th>Aluno</th>
                    <th>Email</th>
                    <th>Presença</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var aluno in PautaWebProfessor)
                {
                    <tr>
                        <td>@aluno.Aluno.Nome</td>
                        <td>@aluno.Aluno.Email</td>
                        <td><input type="checkbox" @bind="aluno.IsSelected" /></td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="modal-footer">
        <div class="row">
            <div class="col-md-12">
                <a class="btn btn-outline-dark" @onclick="() => Modal.Close()">Voltar</a>
                <input type="submit" @onclick="() => GravarPresencaAlunos(PautaWebProfessor)" class="btn btn-outline-primary" value="Salvar" />
                @if (spinner)
                {
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                }
            </div>
        </div>
    </div>
</Modal>

@if (DisciplinasProfessorList == null)
{
    <br />
    <br />
    <br />
    <center>
        <img src="https://media.giphy.com/media/jAYUbVXgESSti/giphy.gif" class="align-content-center" />
    </center>
}
else
{
    <div class="card">
        <div class="card-header">
            <div class="titulo-card">
                Pauta Web - Professor
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <select id="floatingDisciplinaTurno" class="form-select" @onchange="AlteraTurno">
                            <option value="">Selecione o turno</option>
                            @foreach (var item in ListaParametros.ListaTipoTurno)
                            {
                                <option value="@item.Key">@item.Value</option>
                            }
                        </select>
                        <label for="floatingDisciplinaTurno">Turno</label>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(turno))
                {
                    <div class="col-md-6 col-lg-6 form-space">
                        <div class="form-floating mb-3">
                            <select id="floatingDisciplina" class="form-select" @onchange="AlteraDisciplina">
                                <option value="">Selecione a disciplina</option>
                                @foreach (var item in DisciplinasProfessorList.Where(x => x.Turno == turno || string.IsNullOrEmpty(turno)))
                                {
                                    <option value="@item.DisciplinaId">@item.Nome</option>
                                }
                            </select>
                            <label for="floatingDisciplina">Disciplina</label>
                        </div>
                    </div>
                }
            </div>

            @if (exibirTable)
            {
                <DataTable Searchable="true">
                    <thead class="thead-light">
                        <tr>
                            <th>Nome</th>
                            <th>Email</th>
                            <th>Semestre</th>
                            <th>Nota Avaliação 1</th>
                            <th>Nota Avaliação 2</th>
                            <th>Prova Final</th>
                            <th>Nota Final</th>
                            <th>Presença</th>
                            <th>Falta</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in PautaWebProfessor)
                        {
                            <tr>
                                <td>@item.Aluno.Nome</td>
                                <td>@item.Aluno.Email</td>
                                <td>@item.Ano/@item.Semestre</td>
                                <td>@item.NotaAvaliacao1</td>
                                <td>@item.NotaAvaliacao2</td>
                                <td>@item.ProvaFinal</td>
                                <td>@item.NotaFinal</td>
                                <td>@item.QuantidadePresenca</td>
                                <td>@item.QuantidadeFalta</td>
                                <td>
                                </td>
                            </tr>
                        }
                    </tbody>
                </DataTable>
            }

        </div>
        <div class="card-footer">
            <div class="row">
                <div class="col-md-12">
                    <a href="/" class="btn btn-dark">Voltar</a>
                    <input type="submit" class="btn btn-primary" value="Salvar" />
                </div>
            </div>
        </div>
    </div>


}


@code {
    DisciplinaAlunoProfessorViewModel ViewModel;
    List<Disciplina> DisciplinasProfessorList;
    List<DisciplinaAluno> PautaWebProfessor;
    Professor ProfessorLogado;
    string turno;
    bool exibirTable;
    bool spinner;

    private Modal Modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ViewModel = new DisciplinaAlunoProfessorViewModel();
        var usuarioLogado = await GetUsuarioLogadoAsync();
        var professorLogado = await _mediator.Send(new ObterProfessorEmailQuery { Email = usuarioLogado });

        ProfessorLogado = professorLogado.Result;

        if (professorLogado.Errors.Any())
        {
            VoltarToast("Erro ao consultar o registro de professor.");
        }

        DisciplinasProfessorList = await GetDisciplinasProfessorAsync(ProfessorLogado.ProfessorId);

        if (DisciplinasProfessorList.Count == 0)
        {
            VoltarToast("Nenhuma disciplina encontrada para seu usuário.");
        }
    }

    private async Task AlteraDisciplina(ChangeEventArgs ev)
    {
        var disciplinaId = Convert.ToInt32(ev.Value.ToString());

        var response = await _mediator.Send(new ObterPautaWebProfessorQuery
            {
                DisciplinaId = disciplinaId,
                ProfessorId = ProfessorLogado.ProfessorId,
                Turno = turno
            });

        PautaWebProfessor = response.Result;
        exibirTable = true;
        StateHasChanged();
    }

    private async Task GravarPresencaAlunos(List<DisciplinaAluno> Alunos)
    {
        spinner = true;
        StateHasChanged();

        var response = await _mediator.Send(new GravarPresencaAlunosCommand
        {
            Alunos = Alunos
        });

        if (response.Errors.Any())
        {
            spinner = false;
            _toastService.ShowError("Ocorreu um erro ao gravar a presença.");
            Modal.Close();
            Refresh();
        }
        else
        {
            spinner = false;
            _toastService.ShowSuccess("Presença gravado com sucesso!");
            StateHasChanged();
            Modal.Close();
        }
    }

    private async Task<string> GetUsuarioLogadoAsync()
    {
        var currentUser = await _currentUserService.GetUserNameAsync();
        return await Task.FromResult(currentUser);
    }

    private void AlteraTurno(ChangeEventArgs e)
    {
        turno = e.Value.ToString();
        StateHasChanged();
    }

    void Refresh()
    {
        _navigationManager.NavigateTo("/webagenda/professors");
    }

    private async Task<List<Disciplina>> GetDisciplinasProfessorAsync(int professorId)
    {
        return await Task.FromResult((await _mediator.Send(new ObterDisciplinasProfessorIdQuery { ProfessorId = professorId })).Result);
    }

    void VoltarToast(string message)
    {
        _navigationManager.NavigateTo($"/{message}");
    }
}
