@page "/webagenda/professors"
@using Domain.ViewModels
@using SistemaAcademicoApplication.Disciplinas.Queries
@using SistemaAcademicoApplication.Professores.Queries
@inject IMediator _mediator
@inject ICurrentUserService _currentUserService
@inject IToastService _toastService
@inject NavigationManager _navigationManager

@attribute [Authorize(Policy = Policies.IsProfessor)]

@if (DisciplinasProfessorList == null)
{
    <br />
    <br />
    <br />
    <center>
        <img src="https://media.giphy.com/media/jAYUbVXgESSti/giphy.gif" class="align-content-center" />
    </center>
}
else
{
    <div class="card">
        <div class="card-header">
            <div class="titulo-card">
                Pauta Web - Professor
            </div>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <select id="floatingDisciplinaTurno" class="form-select" @onchange="AlteraTurno">
                            <option value="">Selecione o turno</option>
                            @foreach (var item in ListaParametros.ListaTipoTurno)
                            {
                                <option value="@item.Key">@item.Value</option>
                            }
                        </select>
                        <label for="floatingDisciplinaTurno">Turno</label>
                    </div>
                </div>
                @if (!string.IsNullOrEmpty(turno))
                {
                    <div class="col-md-6 col-lg-6 form-space">
                        <div class="form-floating mb-3">
                            <select id="floatingDisciplina" class="form-select" >
                                <option value="">Selecione a disciplina</option>
                                @foreach (var item in DisciplinasProfessorList.Where(x => x.Turno == turno || string.IsNullOrEmpty(turno)))
                                {
                                    <option value="@item.DisciplinaId">@item.Nome</option>
                                }
                            </select>
                            <label for="floatingDisciplina">Disciplina</label>
                        </div>
                    </div>
                }
            </div>

            @*@if()
        {
        <DataTable Searchable="true">
        <thead class="thead-light">
        <tr>
        <th></th>
        <th></th>
        <th></th>
        <th></th>
        <th></th>
        </tr>
        </thead>
        <tbody>

        </tbody>
        </DataTable>
        }*@

        </div>
        <div class="card-footer">
            <div class="row">
                <div class="col-md-12">
                    <a href="/" class="btn btn-dark">Voltar</a>
                    <input type="submit" class="btn btn-primary" value="Salvar" />
                </div>
            </div>
        </div>
    </div>


}


@code {
    DisciplinaAlunoProfessorViewModel ViewModel;
    List<Disciplina> DisciplinasProfessorList;
    string turno;

    protected override async Task OnInitializedAsync()
    {
        ViewModel = new DisciplinaAlunoProfessorViewModel();
        var usuarioLogado = await GetUsuarioLogadoAsync();
        var professorLogado = await _mediator.Send(new ObterProfessorEmailQuery { Email = usuarioLogado });

        if (professorLogado.Errors.Any())
        {
            VoltarToast("Erro ao consultar o registro de professor.");
        }

        DisciplinasProfessorList = await GetDisciplinasProfessorAsync(professorLogado.Result.ProfessorId);

        if (DisciplinasProfessorList.Count == 0)
        {
            VoltarToast("Nenhuma disciplina encontrada para seu usuário.");
        }

        foreach(var disciplina in DisciplinasProfessorList)
        {
            
        }










    }

    private async Task<string> GetUsuarioLogadoAsync()
    {
        var currentUser = await _currentUserService.GetUserNameAsync();
        return await Task.FromResult(currentUser);
    }

    private void AlteraTurno(ChangeEventArgs e)
    {
        turno = e.Value.ToString();
        StateHasChanged();
    }

    private async Task<List<Disciplina>> GetDisciplinasProfessorAsync(int professorId)
    {
        return await Task.FromResult((await _mediator.Send(new ObterDisciplinasProfessorIdQuery { ProfessorId = professorId })).Result);
    }

    void VoltarToast(string message)
    {
        _navigationManager.NavigateTo($"/{message}");
    }
}
