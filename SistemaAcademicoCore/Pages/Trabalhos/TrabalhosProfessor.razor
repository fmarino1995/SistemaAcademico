@page "/professors/projects"
@using SistemaAcademicoApplication.Disciplinas.Queries
@using SistemaAcademicoApplication.Professores.Queries
@using SistemaAcademicoApplication.Semestres.Queries
@using SistemaAcademicoApplication.Trabalhos.Queries
@inject IMediator _mediator
@inject NavigationManager _navigationManager
@inject IToastService _toastService
@inject ICurrentUserService _currentUserService

@attribute [Authorize(Policy = Policies.IsProfessor)]

<div class="card">
    <div class="card-header">
        <div class="titulo-card">
            Trabalhos
        </div>
    </div>
    <div class="card-body">
        <div class="row">
            <div class="col-md-6 col-lg-6 form-space">
                <div class="form-floating mb-3">
                    <select id="floatingDisciplinaTurno" class="form-select" @onchange="AlteraTurno">
                        <option value="">Selecione o turno</option>
                        @foreach (var item in ListaParametros.ListaTipoTurno)
                        {
                            <option value="@item.Key">@item.Value</option>
                        }
                    </select>
                    <label for="floatingDisciplinaTurno">Turno</label>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(turno))
            {
                <div class="col-md-6 col-lg-6 form-space">
                    <div class="form-floating mb-3">
                        <select id="floatingDisciplina" class="form-select" @onchange="AlteraDisciplina">
                            <option value="">Selecione a disciplina</option>
                            @foreach (var item in DisciplinasProfessorList.Where(x => x.ProfessorId == ProfessorLogado.ProfessorId))
                            {
                                <option value="@item.DisciplinaId">@item.Nome</option>
                            }
                        </select>
                        <label for="floatingDisciplina">Disciplina</label>
                    </div>
                </div>
            }
        </div>

        @if(exibirTable)
        {
            <DataTable Searchable="true">
                <thead class="thead-light">
                    <tr>
                        <th>Aluno</th>
                        <th>Email</th>
                        <th>Semestre</th>
                        <th>Data</th>
                        <th>Nota</th>
                        <th>
                            Ações
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach(var item in TrabalhosImportadosDiciplina)
                    {
                        <tr>
                            <td>@item.Aluno.Nome</td>
                            <td>@item.Aluno.Email</td>
                            <td>@item.SemestreVigente.Ano/@item.SemestreVigente.Semestre</td>
                            <td>@item.DataEnvio.ToString("dd/MM/yyyy HH:mm")</td>
                            <td>@item.Nota</td>
                            <td>
                                <div class="dropdown">
                                    <button class="btn btn-secondary dropdown-toggle btn-sm" type="button" id="dropdownOpcoes" data-bs-toggle="dropdown" aria-expanded="false">
                                        Opções
                                    </button>
                                    <ul class="dropdown-menu" aria-labelledby="dropdownOpcoes">
                                        <li><a class="dropdown-item" href="javascript:void(0)" ><span class="oi oi-data-transfer-download" aria-hidden="true"></span> Download do arquivo</a></li>
                                        <li><a class="dropdown-item" href="javascript:void(0)" ><span class="oi oi-pencil" aria-hidden="true"></span> Inserir nota</a></li>
                                    </ul>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </DataTable>
        }
    </div>
</div>

@code {
    List<Disciplina> DisciplinasProfessorList;
    List<Disciplina> DisciplinasProfessorListOriginal;
    Professor ProfessorLogado;
    SemestreVigente SemestreVigente;
    List<Trabalho> TrabalhosImportadosDiciplina;
    string turno;
    bool exibirTable;

    protected override async Task OnInitializedAsync()
    {
        var usuarioLogado = await GetUsuarioLogadoAsync();
        var professorLogado = await _mediator.Send(new ObterProfessorEmailQuery { Email = usuarioLogado });
        ProfessorLogado = professorLogado.Result;
        var semestreVigente = await _mediator.Send(new ObterSemestreVigenteQuery());
        SemestreVigente = semestreVigente.Result;
        DisciplinasProfessorListOriginal = (await _mediator.Send(new ObterDisciplinasQuery())).Result;
        DisciplinasProfessorList = DisciplinasProfessorListOriginal;
    }

    private async Task AlteraDisciplina(ChangeEventArgs ev)
    {
        if (string.IsNullOrEmpty(ev.Value.ToString()))
        {
            exibirTable = false;
            StateHasChanged();
        }
        else
        {
            var disciplinaId = Convert.ToInt32(ev.Value.ToString());

            var response = await _mediator.Send(new ObterTrabalhosImportadosProfessorDisciplinaQuery
            {
                DisciplinaId = disciplinaId,
                ProfessorId = ProfessorLogado.ProfessorId,
                Turno = turno,
                SemestreVigenteId = SemestreVigente.SemestreVigenteId
            });

            TrabalhosImportadosDiciplina = response.Result;
            exibirTable = true;
            StateHasChanged();
        }
    }

    private async Task<string> GetUsuarioLogadoAsync()
    {
        var currentUser = await _currentUserService.GetUserNameAsync();
        return await Task.FromResult(currentUser);
    }

    private void AlteraTurno(ChangeEventArgs e)
    {
        turno = e.Value.ToString();

        if(string.IsNullOrEmpty(turno))
        {
            DisciplinasProfessorList = DisciplinasProfessorListOriginal;
        }
        else
        {
            DisciplinasProfessorList = DisciplinasProfessorListOriginal.Where(d => d.Turno == turno).ToList();
        }

        StateHasChanged();
    }
}
