@page "/semester"
@using SistemaAcademicoApplication.Semestres.Commands
@using SistemaAcademicoApplication.Semestres.Queries
@inject IMediator _mediator
@inject NavigationManager _navigationManager
@inject IToastService _toastService

<Modal @ref="Modal" Title="Novo Semestre">
    <EditForm Model="@Semestre" OnValidSubmit="AddSemestreAsync">
        <FluentValidationValidator />
        <ValidationSummary />
        <div class="modal-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-space">
                        <label class="form-label" for="dt_inicio">Data Inicial</label>
                        @*<input id="dt_inicio" type="date" class="form-control" @bind="Semestre.DataInicioAux" />*@
                        <InputDate id="dt_inicio" class="form-control" @bind-Value="Semestre.DataInicioAux"></InputDate>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-space">
                        <label class="form-label" for="dt_fim">Data Final</label>
                        @*<input id="dt_fim" type="date" class="form-control" @bind="Semestre.DataFimAux" />*@
                        <InputDate id="dt_fim" class="form-control" @bind-Value="Semestre.DataFimAux"></InputDate>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <div class="row">
                <div class="col-md-12">
                    <a class="btn btn-outline-dark" @onclick="() => Modal.Close()">Voltar</a>
                    <input type="submit" class="btn btn-outline-primary" value="Salvar" />
                </div>
            </div>
        </div>
    </EditForm>
</Modal>

@if (Semestres == null)
{
    <br />
    <br />
    <br />
    <center>
        <img src="https://media.giphy.com/media/jAYUbVXgESSti/giphy.gif" class="align-content-center" />
    </center>
}
else
{
    <div class="card">
        <div class="card-header">
            <div class="titulo-card">
                Semestre Vigente
            </div>
        </div>
        <div class="card-body">
            <DataTable Searchable="true">
                <thead class="thead-light">
                    <tr>
                        <th>Ano</th>
                        <th>Semestre</th>
                        <th>Data Início</th>
                        <th>Data Fim</th>
                        <th>Vigente</th>
                        <th>
                            <a href="javascript:void(0)" @onclick="() => Modal.Open()" title="Novo registro"><span class="oi oi-plus"></span></a>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Semestres)
                    {
                        <tr>
                            <td>@item.Ano</td>
                            <td>@item.Semestre</td>
                            <td>@item.DataInicio.ToString("dd/MM/yyyy")</td>
                            <td>@item.DataFim.ToString("dd/MM/yyyy")</td>
                            <td><input type="checkbox" disabled="disabled" @bind="item.Vigente" /></td>
                            <td>
                                <a href="javascript:void(0)" @onclick="() => AlterarVigenciaSemestre(semestre: item)" title="Alterar vigência"><span class="oi oi-pencil"></span></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </DataTable>
        </div>
        <div class="card-footer">
            <a href="/" class="btn btn-outline-dark">Voltar</a>
        </div>
    </div>
}


@code {
    List<SemestreVigente> Semestres;
    SemestreVigente Semestre = new SemestreVigente();
    Modal Modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var semestres = await _mediator.Send(new ObterSemestresQuery());

        Semestres = semestres.Result;
    }

    private async Task AddSemestreAsync()
    {
        Semestre.DataInicio = Semestre.DataInicioAux.Value;
        Semestre.DataFim = Semestre.DataFimAux.Value;
        Semestre.Ano = Semestre.DataFim.Year;

        var ultimoSemestre = await _mediator.Send(new ConsultarUltimoSemestreCriadoQuery());

        if (ultimoSemestre.Result != null)
        {
            //ultimoSemestre.Result.Vigente = false;
            Semestre.Semestre = ultimoSemestre.Result.Ano == Semestre.Ano && ultimoSemestre.Result.Semestre == 1 ? 2 : 1; 
        }
        else
        {
            Semestre.Vigente = true;
            Semestre.Semestre = Semestre.DataInicio.Month >= 7 && Semestre.Ano == DateTime.Now.Year ? 2 : 1;
        }

        await _mediator.Send(new CriarSemestreCommand { SemestreVigente = Semestre });

        _toastService.ShowSuccess("Semestre criado com sucesso!");
        StateHasChanged();
        Refresh();
    }

    private async Task AlterarVigenciaSemestre(SemestreVigente semestre)
    {
        var ultimoSemestre = await _mediator.Send(new ConsultarSemestreAtualQuery());

        var response = await _mediator.Send(new AlterarVigenciaSemestreCommand
        {
            SemestreAtual = ultimoSemestre.Result,
            SemestreNovo = semestre
        });

        _toastService.ShowSuccess("Semestre vigente alterado com sucesso!");
        StateHasChanged();
        Refresh();
    }

    void Refresh()
    {
        _navigationManager.NavigateTo("semester", forceLoad: true);
    }
}